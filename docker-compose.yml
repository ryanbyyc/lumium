x-go-service: &go-service
  env_file:
    - ./.env
  build:
    context: .
    dockerfile: backend/Dockerfile.dev
    args:
      UID: ${UID:-1000}
      GID: ${UID:-1000}
  working_dir: /app/backend
  volumes:
    - ./backend:/app/backend
    - type: volume
      source: gomodcache
      target: /go/pkg/mod
      volume:
        nocopy: true
    - type: volume
      source: gocache
      target: /root/.cache/go-build
      volume:
        nocopy: true
  depends_on:
    nats:
      condition: service_started
    postgres:
      condition: service_healthy
    clickhouse:
      condition: service_healthy
    minio:
      condition: service_healthy

services:
  # Supporting services like Postgres & Clickhouse
  postgres:
    container_name: ${SERVICE_PREFIX:-lm_}pgsql
    image: postgres:16
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - "./backend/docker/pgsql/init.sql:/docker-entrypoint-initdb.d/init.sql"
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 3s
      timeout: 3s
      retries: 20
    env_file:
      - ./.env
    attach: false

  nats:
    container_name: ${SERVICE_PREFIX:-lm_}nats
    image: nats:latest
    command: ["-js", "-m", "8222"]
    ports:
      - "4222:4222"
      - "8222:8222"
    env_file:
      - ./.env
    attach: false
  adminer:
    container_name: ${SERVICE_PREFIX:-lm_}adminer
    image: adminer:latest
    environment:
      - ADMINER_DEFAULT_SERVER=${SERVICE_PREFIX:-lm_}postgres
      - ADMINER_DEFAULT_USER=${POSTGRES_USER}
    ports:
      - "8088:8080"
    depends_on:
      - postgres
    env_file:
      - ./.env
    attach: false
  clickhouse:
    container_name: ${SERVICE_PREFIX:-lm_}clickhouse
    image: clickhouse/clickhouse-server:latest
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - chdata:/var/lib/clickhouse
    healthcheck:
      test:
        ["CMD-SHELL", "wget -qO- http://localhost:8123/ping | grep -q 'Ok.'"]
      interval: 5s
      timeout: 5s
      retries: 30
    env_file:
      - ./.env
    attach: false
  minio:
    container_name: ${SERVICE_PREFIX:-lm_}minio
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${SERVICE_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${SERVICE_MINIO_ROOT_PASSWORD}
    ports:
      - "9001:9000"
      - "9002:9001"
    volumes:
      - minio:/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:9000/minio/health/live || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 30
    env_file:
      - ./.env
    attach: false
  minio-init:
    container_name: ${SERVICE_PREFIX:-lm_}init
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      sh -c "
      mc alias set local http://minio:9000 ${SERVICE_MINIO_ROOT_USER} ${SERVICE_MINIO_ROOT_PASSWORD} &&
      mc mb -p local/${SERVICE_S3_BUCKET} || true &&
      mc ilm rule add local/${SERVICE_S3_BUCKET} --expire-days=3650 || true
      "
    env_file:
      - ./.env
    attach: true
  goconvey:
    image: golang:1.25-bookworm
    container_name: ${SERVICE_PREFIX:-lm_}goconvey
    env_file:
      - ./.env
    working_dir: /app/backend
    environment:
      GO111MODULE: "on"
      GOFLAGS: "-buildvcs=false"
    volumes:
      - ./backend:/app/backend
      - type: volume
        source: gomodcache
        target: /go/pkg/mod
        volume:
          nocopy: true
      - type: volume
        source: gocache
        target: /root/.cache/go-build
        volume:
          nocopy: true
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
      clickhouse:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: sh -c "go mod download && go install github.com/smartystreets/goconvey@latest && /go/bin/goconvey -host 0.0.0.0 -port 8080 -workDir /app/backend -depth 100 -excludedDirs bin,vendor,.git"
    ports:
      - "8089:8080"
    attach: false

  # PROPERTIES (Like API & Frontend)

  api:
    <<: *go-service
    container_name: ${SERVICE_PREFIX:-lm_}api
    ports:
      - "${CORE_API_PORT}:${CORE_API_PORT}"
    command: sh -c "air -c services/api/.air.toml"
    attach: true

  scanner:
    container_name: ${SERVICE_PREFIX:-lm_}scanner
    <<: *go-service
    command: ["air", "-c", "services/scanner/.air.toml"]
    attach: true

  exifd:
    container_name: ${SERVICE_PREFIX:-lm_}exifd
    <<: *go-service
    command: ["air", "-c", "services/exifd/.air.toml"]
    attach: true

  phashd:
    container_name: ${SERVICE_PREFIX:-lm_}phashd
    <<: *go-service
    command: ["air", "-c", "services/phashd/.air.toml"]
    attach: true

  albumer:
    container_name: ${SERVICE_PREFIX:-lm_}albumer
    <<: *go-service
    command: ["air", "-c", "services/albumer/.air.toml"]
    attach: true

  thumbd:
    container_name: ${SERVICE_PREFIX:-lm_}thumbd
    <<: *go-service
    command: ["air", "-c", "services/thumbd/.air.toml"]
    attach: true

  replicator:
    container_name: ${SERVICE_PREFIX:-lm_}replicator
    <<: *go-service
    command: ["air", "-c", "services/replicator/.air.toml"]
    attach: true
  web:
    env_file:
      - ./.env
    container_name: ${SERVICE_PREFIX:-lm_}web
    build:
      context: .
      dockerfile: frontend/web/Dockerfile.dev
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    working_dir: /workspace/frontend/web
    ports:
      - "5173:5173"
    volumes:
      - .:/workspace
    environment:
      - NODE_ENV=development
      - PORT=5173
      - NPM_CONFIG_CACHE=/home/frontend/.npm
    command: "npm run dev"
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "http=require('http');http.get('http://localhost:5173',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))",
        ]
      interval: 10s
      timeout: 3s
# Volumes
volumes:
  pgdata:
  chdata:
  minio:
  gomodcache:
  gocache:
