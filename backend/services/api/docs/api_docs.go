// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplateapi = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/forgot": {
            "post": {
                "description": "Always returns 202 (Accepted) without revealing whether the email exists.\nIf the user exists, a reset token is generated and (normally) delivered out-of-band.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Forgot password",
                "parameters": [
                    {
                        "description": "email to reset",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ForgotDTO"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "accepted; no user enumeration",
                        "schema": {
                            "$ref": "#/definitions/auth.AcceptedWire"
                        }
                    },
                    "400": {
                        "description": "bad request / validation error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate with email/password. On success returns an access token in the body\nand sets a refresh-token HttpOnly cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "credentials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.ResultWire"
                        },
                        "headers": {
                            "Set-Cookie": {
                                "type": "string",
                                "description": "HttpOnly refresh token cookie (name \u0026 attributes per server config)"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request / validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorWire"
                        }
                    },
                    "423": {
                        "description": "MFA required; complete challenge before retrying login",
                        "schema": {
                            "$ref": "#/definitions/auth.MFALockedResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Revoke the current refresh session and clear the token cookie.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "Set-Cookie": {
                                "type": "string",
                                "description": "Clears refresh token cookie"
                            }
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "description": "Return the current user derived from a Bearer access token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Current user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.UserPublic"
                        }
                    },
                    "422": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorWire"
                        }
                    }
                }
            }
        },
        "/auth/mfa/challenge": {
            "post": {
                "description": "Issues a one-time MFA challenge for the user. Typically called after a 423 ` + "`" + `mfa_required` + "`" + ` login response",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Start MFA challenge",
                "parameters": [
                    {
                        "description": "user to challenge",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.MFAChallengeDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "challenge metadata",
                        "schema": {
                            "$ref": "#/definitions/auth.MFAChallengeResult"
                        }
                    },
                    "400": {
                        "description": "bad request / validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/mfa/verify": {
            "post": {
                "description": "Verifies the 6-digit code for a challenge",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify MFA code",
                "parameters": [
                    {
                        "description": "verification payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.MFAVerifyDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "verification status",
                        "schema": {
                            "$ref": "#/definitions/auth.MFAVerifyOK"
                        }
                    },
                    "400": {
                        "description": "bad request / validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "invalid or expired code",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorWire"
                        }
                    },
                    "410": {
                        "description": "challenge expired",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Rotate the refresh session (from an HttpOnly cookie) and mint a new access token.\nOn success, returns a new access token in the body and sets a new refresh-token cookie.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshWire"
                        },
                        "headers": {
                            "Set-Cookie": {
                                "type": "string",
                                "description": "New HttpOnly refresh token cookie (name \u0026 attributes per server config)"
                            }
                        }
                    },
                    "422": {
                        "description": "unauthorized or invalid/expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorWire"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Create a new account. Success returns an access token in the body and sets a refresh-token cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": "new account",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SignupDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.ResultWire"
                        },
                        "headers": {
                            "Set-Cookie": {
                                "type": "string",
                                "description": "HttpOnly refresh token cookie (name \u0026 attributes per server config)"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request / validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "email already in use or tenant conflict",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/reset": {
            "post": {
                "description": "Validates the reset token and sets a new password. On success clears the refresh cookie and returns 204.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "reset token + new password",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ResetDTO"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "password updated; no content",
                        "headers": {
                            "Set-Cookie": {
                                "type": "string",
                                "description": "clears refresh cookie"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request / validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorWire"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.AcceptedWire": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "accepted"
                },
                "message": {
                    "type": "string",
                    "example": "If an account exists, you'll receive an email with instructions."
                }
            }
        },
        "auth.ErrorWire": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Machine-readable code",
                    "type": "string",
                    "example": "invalid_credentials"
                },
                "message": {
                    "description": "Human-readable message",
                    "type": "string",
                    "example": "Invalid email or password."
                }
            }
        },
        "auth.ForgotDTO": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "auth.LoginDTO": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "mfa_challenge_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "mfa_code": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "auth.MFAChallengeDTO": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "user_id": {
                    "type": "string"
                }
            }
        },
        "auth.MFAChallengeResult": {
            "type": "object",
            "properties": {
                "challengeID": {
                    "type": "string"
                },
                "factors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "auth.MFALockedResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "mfa_required"
                },
                "details": {
                    "type": "object",
                    "properties": {
                        "challenge_id": {
                            "type": "string",
                            "example": "ch_01JABCXYZ"
                        },
                        "factors": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "example": [
                                "[\"totp\"",
                                "\"email\"]"
                            ]
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Additional verification required"
                }
            }
        },
        "auth.MFAVerifyDTO": {
            "type": "object",
            "required": [
                "challenge_id",
                "code"
            ],
            "properties": {
                "challenge_id": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                }
            }
        },
        "auth.MFAVerifyOK": {
            "type": "object",
            "properties": {
                "ok": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "auth.RefreshWire": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                }
            }
        },
        "auth.ResetDTO": {
            "type": "object",
            "required": [
                "password",
                "token"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 8
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "auth.ResultWire": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/auth.UserPublic"
                }
            }
        },
        "auth.SignupDTO": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 120
                },
                "password": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 8
                },
                "tenant_slug": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 3
                }
            }
        },
        "auth.UserPublic": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "primary_tenant_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfoapi holds exported Swagger Info so clients can modify it
var SwaggerInfoapi = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "api",
	SwaggerTemplate:  docTemplateapi,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfoapi.InstanceName(), SwaggerInfoapi)
}
